{
  "swagger": "2.0",
  "info": {
    "description": "Maintenance Tracker App is an application that provides users with the ability to reach out to operations or repairs department regarding repair or maintenance requests and monitor the tatus of their request.",
    "version": "1.0.0",
    "title": "Maintenance Tracker",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "maintenancetr.herokuapp",
  "basePath": "/api/v1",
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Registers a new user",
        "description": "",
        "operationId": "signup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "type": "string",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has been registered"
          },
          "404": {
            "description": "Unable to register user"
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "schema": {
              "type": "string"
            }
          },
          "406": {
            "description": "Invalid username/password supplied",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users/requests": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get a request by the request id",
        "description": "",
        "operationId": "getUserRequests",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Displaying user requests",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to retrieve the details of all the user's requests"
          },
          "404": {
            "description": "No request for this user"
          }
        }
      },
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Updated request",
        "description": "This can only be done by the logged in user.",
        "operationId": "newRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been created"
          },
          "400": {
            "description": "Unable to make request"
          }
        }
      }
    },
    "/users/requests/{requestid}": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get a request by the request id",
        "description": "",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestid",
            "in": "path",
            "description": "The request that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Request found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "something is wrong"
          },
          "404": {
            "description": "Request not found"
          }
        }
      },
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Updated request",
        "description": "This can only be done by the logged in user, and this operation should not be possible when the admin has approved of the request.",
        "operationId": "updateRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestid",
            "in": "path",
            "description": "The request that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been modified"
          },
          "400": {
            "description": "Unable to Modify user details"
          },
          "401": {
            "description": "You are Unauthorized to edit this request"
          }
        }
      }
    },
    "/requests": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Get a request by the request id",
        "description": "",
        "operationId": "getEveryUserRequests",
        "produces": [
          "application/json"
        ],
        "responses": {
          "302": {
            "description": "All requests",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Unable to List all requests"
          },
          "404": {
            "description": "No request found"
          }
        }
      }
    },
    "/requests/{requestId}": {
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Find the request by ID",
        "description": "For valid response try integer IDs with value >= 1.Other values will generated exceptions. This can only be implemented by an Admin",
        "operationId": "getUserRequestAdmin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "ID of the request that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Request Found",
            "schema": {
              "$ref": "#/definitions/Request"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "something is wrong"
          }
        }
      }
    },
    "/requests/{requestId}/approve": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Approve a user's request",
        "description": "This can only be done by the logged in Admin, and this operation should not be possible when the the request has already been disapproved or resolved.",
        "operationId": "approveRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The request that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been approved"
          },
          "400": {
            "description": "Unable approve the request"
          }
        }
      }
    },
    "/requests/{requestId}/disapprove": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Disapprove a user's request",
        "description": "This can only be done by the logged in Admin, and this operation should not be possible when the the request has already been resolved.",
        "operationId": "disApproveRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The request that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been Disapproved"
          },
          "400": {
            "description": "Unable to Disapprove the request"
          }
        }
      }
    },
    "/requests/{requestId}/resolve": {
      "put": {
        "tags": [
          "Request"
        ],
        "summary": "Disapprove a user's request",
        "description": "This can only be done by the logged in Admin, and this operation should not be possible when the the request has already been resolved.",
        "operationId": "resolveRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The request that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request has been resolved"
          },
          "400": {
            "description": "You can only resolve a request that is pending"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Request": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "fault": {
          "type": "string"
        },
        "brand": {
          "type": "string"
        },
        "modelnumber": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "other": {
          "type": "string"
        },
        "statusid": {
          "type": "string",
          "description": "Request Status"
        },
        "createdon": {
          "type": "string",
          "format": "date-Time"
        }
      },
      "xml": {
        "name": "Request"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "isadmin": {
          "type": "string"
        },
        "isactive": {
          "type": "string"
        },
        "createdon": {
          "type": "string",
          "format": "dateTime"
        }
      },
      "xml": {
        "name": "User"
      }
    }
  }
}